var express = require('express')
var path = require('path')
var hbs = require('hbs')
var fs = require('fs')
var fm = require('front-matter')
var _ = require('lodash')
var marked = require('marked')
var extend = require('util')._extend

var config = {
    templateDir: 'template',
    templateDetail: null,
    templateList: null,
    postDir: 'posts',
    postPerPage: 10
}

module.exports.getPost = function () {
    return function (req, res) {
        if (req.params.postname) {
            var post = _extractFM(req.params.postname + '.md')
            return (config.templateDetail)
            ? res.render(config.templateDetail, { post: post }) : res.json(post)
        } else {
            var posts = _parsingMd()
            return (config.templateList)
            ? res.render(config.templateList, { posts: posts }) : res.json(posts)
        }
        
    }
}

module.exports.setupTemplate = function (name) {
    return (req, res, next) => {
        switch (name) {
            case 'frontend':
                req.app.set('views', 'views')
                break
            default:
                req.app.use(express.static(config.templateDir + '/static'))
                _registerPartials(config.templateDir + '/parts')
                req.app.set('views', config.templateDir)
                break
        }
        next()
    }
}

module.exports.init = function (options) {
    config = extend(config,  options)
    const router = express.Router()
    router.get('/admin', function (req, res) {
        res.send('goBlog Admin')
    })
    router.get('/', [
        module.exports.setupTemplate(),
        module.exports.getPost()
    ])
    router.get('/:postname', [
        module.exports.setupTemplate(),
        module.exports.getPost()
    ])
    router.use(function(err, req, res, next) {
        errorView = path.join(config.templateDir, 'error.hbs')
        if (!fs.existsSync(errorView)) {
            res.send({
                'status': err.status || 500,
                'message': 'The page you are looking for can\'t be found.'
            })
        }
        if(req.app.get('env') !== 'development') {
            res.locals.title = err.message
            res.locals.message = err
        } else {
            res.locals.title = 'Error ' + (err.status || '500')
            res.locals.message = 'Oops, something went wrong'
        }
        // render the error page
        res.status(err.status || 500);
        res.render('error');
    });

    return router
}

function _extractFM (filename) {
    try {
        let data = fs.readFileSync(config.postDir +'/'+ filename, 'utf8')
        var content = fm(data.toString())
        delete content.frontmatter
        content.html = marked(content.body)
        content.id = path.basename(filename, path.extname(filename))
        return content
    } catch (error) {
        throw new Error(`The post ${filename} does not exist.`);
    }
}

function _registerPartials (dir) {
    try {
        const partials = fs.readdirSync(dir)
        for (var i in partials) {
            let filePath = dir +'/'+ partials[i]
            let fileName = path.basename(partials[i], path.extname(partials[i]))
            hbs.registerPartial(fileName, fs.readFileSync(filePath, 'utf8'))
        }
    } catch (error) {
        console.warn('_registerPartials', error)
    }
}

function _parsingMd () {
    try {
        const allFile = fs.readdirSync(config.postDir)
        let files = []
        for (var i in allFile) {
            var file = _extractFM(allFile[i])
            files.push(file)
        }
        return files
    } catch (error) {
        throw error
    }
}